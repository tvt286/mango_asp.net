@using Mango.Common
@using Mango.Client.Common
@using Mango.Services
@using Mango.Security
@using Mango.Data.Enums
@using Mango.Web

@model Mango.Data.Product

@{
    if (Model.Id == 0)
    {
        ViewBag.Title = "Create product";
    }
    else
    {
        ViewBag.Title = "Edit product";
    }
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
    var user = UserService.GetUserInfo();
}

<div class="row">
    <div class="col-xs-12">
        <div class="page-title-box">
            <h4 class="page-title">Product</h4>
            <ol class="breadcrumb p-0 m-0">
                <li>
                    <a href="@Url.Action(" index","home")">Mango</a>
                </li>
                <li>
                    <a href="@Url.Action(" index")">Product</a>
                </li>
                <li class="active">
                    @if (Model.Id == 0)
                    {
                        <strong>Create</strong>
                    }
                    else
                    {
                        <strong>Edit</strong>
                    }
                </li>
            </ol>

            <div class="clearfix"></div>
            @if (UserPermission.Has(Permission.Product_Create) || user.IsAdminCompany)
            {
                <a style="margin-right:10px" onclick="$('#btUpdate').click()" class="btn btn-primary waves-effect waves-light m-t-sm">Save</a>
            }
            @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-default waves-effect m-t-sm" })
        </div>
    </div>
</div>
<!-- end row -->
@using (Ajax.BeginForm("Create", "Product", null, new AjaxCommonOption { OnSuccess = "CreateSuccess" }, new { role = "form", id = "CreateForm", enctype = "multipart/form-data" }))
{
    @Html.HiddenFor(x => x.Id)

    <div class="card-box animated fadeInRight">
        <div class="row">
            <div class="col-lg-12">
                <!--Box thông tin-->
                <div class="ibox ">
                    <div>
                        <h5>Product Info</h5>
                    </div>
                    <div class="ibox-content">
                        <div class="form-horizontal">
                            <div class="form-group">
                                <label class="control-label col-md-2">Code<span style="color: Red">(*)</span></label>
                                <div class="col-md-4">
                                    @if (Model.Id == 0)
                                    {
                                        @Html.TextBoxFor(x => x.Code, null, new { @class = "form-control", @placeholder = "Code", data_val = "true", data_val_required = "Thông tin bắt buộc" })
                                        @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(x => x.Code, null, new { @disabled = "disabled", @class = "form-control", @placeholder = "Code", data_val = "true", data_val_required = "Thông tin bắt buộc" })
                                        @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })

                                    }

                                </div>
                                <label class="control-label col-md-2">Name<span style="color: Red">(*)</span></label>
                                <div class="col-md-4">
                                    @Html.TextBoxFor(x => x.Name, null, new { @class = "form-control", @placeholder = "Name", data_val = "true", data_val_required = "Thông tin bắt buộc" })
                                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                <label class="control-label col-md-2">Category<span style="color: Red">(*)</span></label>
                                <div class="col-md-4">
                                    @Html.DropDownListFor(x => x.CategoryId, null, "-- Danh mục --", new { @class = "form-control", data_val = "true", data_val_required = "Thông tin bắt buộc" })
                                    @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                                </div>
                                <label class="control-label col-md-2">Supplier Price<span style="color: Red">(*)</span></label>
                                <div class="col-md-4">
                                    @Html.TextBoxFor(x => x.SupplierPrice, null, new { @class = "form-control autoNumeric", data_val = "false", data_val_required = "Thông tin bắt buộc" })
                                    @*@Html.ValidationMessageFor(model => model.SupplierPrice, "", new { @class = "text-danger" })*@
                                </div>
                            </div>
                            <div class="form-group">
                                <label class="control-label col-md-2">Selling Price<span style="color: Red">(*)</span></label>
                                <div class="col-md-4">
                                    @Html.TextBoxFor(x => x.SellingPrice, null, new { @class = "form-control autoNumeric", data_val = "false", data_val_required = "Thông tin bắt buộc" })
                                    @*@Html.ValidationMessageFor(model => model.SellingPrice, "", new { @class = "text-danger" })*@
                                </div>

                                <label class="control-label col-md-2">Amount Alert For Store<span style="color: Red">(*)</span></label>
                                <div class="col-md-4">
                                    @Html.TextBoxFor(x => x.AmountAlertForStore, null, new { @class = "form-control autoNumeric", data_val = "true", data_val_required = "Thông tin bắt buộc" })
                                    @Html.ValidationMessageFor(model => model.AmountAlertForStore, "", new { @class = "text-danger" })
                                </div>
                            </div>

                        </div>


                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-12">
                    <h4 class="m-b-30 m-t-0 header-title"><b>Description</b></h4>
                    @Html.TextAreaFor(x => x.Description, new { @class = "form-control summernote" })
        </div>
    </div>
    

     <div class="row">
        <div class="col-sm-12">
            <div class="card-box table-responsive">
                <div class="row" style="margin-bottom:10px;">
                    <div class="form-group">
                        <div class="col-md-2">
                            <button class="btn btn-success m-b-sm" type="button" id="btAddImage">
                                <i class="fa fa-plus"></i>
                                <span class="bold">Add Image</span>
                            </button>
                            <input name="fileImage" id="FileImageProduct" type="file" style="display:none" />
                            <input name="fileUploadImage" value="" id="fileUploadImage" type="hidden" />
                            <input name="Image" value="@Model.Image" id="Image" type="hidden" />

                        </div>
                    </div>
                </div>

                <div class="row">
                    <div id="imagePreview"></div>
                </div>
                <div class="row">
                    <div class="col-lg-12">
                        @if (UserPermission.Has(Permission.Product_Create) || user.IsAdminCompany)
                        {
                            <input style="margin-right:10px" class="btn btn-primary" type="submit" id="btUpdate" value="Save" />
                        }
                        @Html.ActionLink("Cancel", "Index", null, htmlAttributes: new { @class = "btn btn-default ", role = "button" })
                    </div>
                </div>

            </div>
        </div>
    </div>
    
                      

}


@section Styles {
    <link href="/Content/Admin/summernote.css" rel="stylesheet" />

    <link href="~/Content/Admin/chosen.css" rel="stylesheet" />
    <link href="~/Content/Admin/plugin//iCheck/custom.css" rel="stylesheet" />
    <style>
        .input-validation-error {
            border: 1px solid red;
        }

        .remove, .removeEdit {
            margin-left: 10px;
            margin-bottom: 10px;
            margin-right: 10px;
            width: 150px;
            display: block;
            background: #444;
            border: 1px solid black;
            color: white;
            text-align: center;
            cursor: pointer;
        }

        .pip {
            display: inline-block;
            margin: 10px 10px 0 0;
        }

        .imagev {
            border: 2px solid;
            margin: 10px;
            width: 150px;
            height: 120px;
            background-position: center center;
            background-size: cover;
            -webkit-box-shadow: 0 0 1px 1px rgba(0, 0, 0, .3);
        }
    </style>
}


@section scripts
{
    <script src="/Scripts/Admin/summernote.min.js"></script>

    @if (Model.Id != 0 && !UserPermission.Has(Permission.Product_Create) && !user.IsAdminCompany)
    {
        <script type="text/javascript">
            $("input").attr("disabled", "disabled");
            $("select").attr("disabled", "disabled");
        </script>
    }
    <script type="text/javascript">

        jQuery(document).ready(function () {
            $('.summernote').summernote({
                height: 250,                 // set editor height
                minHeight: null,             // set minimum height of editor
                maxHeight: null,             // set maximum height of editor
                focus: false                 // set focus to editable area after initializing summernote
            });

        });

        // Upload Image
        $(function () {
            var filesToUpload = [];
            var fileIdCounter = 0;

            function getExtension(filename) {
                var parts = filename.split('.');
                return parts[parts.length - 1];
            }

            // kiem tra file anh
            function isImage(files) {
                for (var i = 0; i < files.length; i++) {
                    var ext = getExtension(files[i]["name"]);
                    switch (ext.toLowerCase()) {
                        case 'jpg':
                        case 'png':
                            // etc
                            continue;
                    }
                    return false;
                }
                return true
            }


            var linkImage = '@Model.Image';
            if (linkImage != "") {
                var list = linkImage.split(";");
                for (var i = 0; i < list.length - 1; i++) {
                    var src = list[i].replace('~', '');
                    $('#imagePreview').append('<span class=\"pip\"><img class="imagev" src="' + src + '" /><br/><span class=\"removeEdit\" data-fileid=\"' + list[i] + '\">Xóa</span></span>');
                }

            }

            $(".removeEdit").click(function () {
                var fileId = $(this).parent(".pip").children("span").data("fileid");

                var image = $("#Image").val();
                var res = image.replace(fileId + ";", "");
                $("#Image").val(res);

                $(this).parent(".pip").remove();
            });

            function previewImages() {
                var fileList = this.files;
                var output = [];
                if (!isImage(fileList)) {
                    AlertError("Vui lòng chỉ chọn file ảnh");
                    return false;
                }
                var anyWindow = window.URL || window.webkitURL;
                for (var i = 0; i < fileList.length; i++) {
                    sizefile = fileList[i].size / 1024;
                    if (sizefile > 2048) {
                        AlertError("Vui lòng nhập kích thước hình ảnh < 2MB");
                        return false;
                    }

                    fileIdCounter++;
                    var file = fileList[i];
                    var fileId = "Product" + fileIdCounter;

                    filesToUpload.push({
                        id: fileId,
                        file: file
                    });

                    var objectUrl = anyWindow.createObjectURL(fileList[i]);
                    $('#imagePreview').append('<span class=\"pip\"><img class="imagev" src="' + objectUrl + '" /><br/><span class=\"remove\" data-fileid=\"' + fileId + '\">Xóa</span></span>');

                    window.URL.revokeObjectURL(fileList[i]);
                }

                if (filesToUpload.length > 0) {
                    var result = "";
                    for (var i = 0; i < filesToUpload.length; i++) {
                        (function (i) {
                            var FR = new FileReader();
                            FR.onload = function (e) {
                                result += e.target.result + " ";
                                $("#fileUploadImage").val(result);
                            };
                            FR.readAsDataURL(filesToUpload[i].file);
                        })(i);
                    }
                }

                $(".remove").click(function () {
                    var fileId = $(this).parent(".pip").children("span").data("fileid");

                    for (var i = 0; i < filesToUpload.length; ++i) {
                        if (filesToUpload[i].id === fileId)
                            filesToUpload.splice(i, 1);
                    }
                    if (filesToUpload.length > 0) {

                        var result = "";
                        for (var i = 0; i < filesToUpload.length; i++) {
                            (function (i) {
                                var FR = new FileReader();
                                FR.onload = function (e) {
                                    result += e.target.result + " ";
                                    $("#fileUploadImage").val(result);
                                };
                                FR.readAsDataURL(filesToUpload[i].file);
                            })(i);
                        }
                    }
                    else {
                        $("#fileUploadImage").val("");
                    }
                    $(this).parent(".pip").remove();
                });

            }

            $("#btAddImage").click(function () {
                $("#FileImageProduct:hidden").attr("multiple", true);
                $("#FileImageProduct:hidden").trigger('click');
                var inputLocalFont = document.getElementById("FileImageProduct");
                inputLocalFont.addEventListener("change", previewImages, false);

            });

        });

        $(function () {
            $('.autoNumeric')
            .autoNumeric('init', { aPad: false, aSep: '.', aDec: ',', vMin: 0.00, vMax: 99999999999999999.00 });
            $('.autoNumeric').blur();

        });

        function inItUploadAjaxForm(successFunction) {
            window.addEventListener("submit", function (e) {
                OnBeginAjax();
                if (!$('#CreateForm').valid()) {
                    OnCompleteAjax();
                    return false;
                }

                $('.autoNumeric').each(function (i) {
                    var self = $(this);
                    try {
                        var v = self.autoNumeric('get');
                        //self.autoNumeric('destroy');
                        self.val(v);
                    } catch (err) {
                        self.val(0);
                    }
                });

                var form = e.target;
                if (form.getAttribute("enctype") === "multipart/form-data") {
                    if (form.dataset.ajax) {
                        e.preventDefault();
                        e.stopImmediatePropagation();
                        var xhr = new XMLHttpRequest();
                        xhr.open(form.method, form.action);
                        xhr.onreadystatechange = function (result) {
                            if (xhr.readyState == 4 && xhr.status == 200) {
                                if (successFunction)
                                    successFunction(xhr.responseText);
                            }
                            OnCompleteAjax();
                        };
                        xhr.send(new FormData(form));
                    }
                }
            }, true);
        }

        inItUploadAjaxForm(CreateSuccess);

        function CreateSuccess(result) {
            var data = JSON.parse(result);
            OnSuccessAjax(data);
        }


    </script>
}


